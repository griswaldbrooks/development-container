<?xml version="1.0"?>
<robot name="platform" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.46"/>
  <xacro:property name="base_length" value="0.812"/>
  <xacro:property name="base_height" value="0.28"/>

  <xacro:property name="wheel_radius" value="0.1715"/>
  <xacro:property name="wheel_width" value="0.07"/>
  <xacro:property name="wheel_track" value="0.540"/>

  <xacro:property name="caster_xoff" value="0.65"/>

  <!-- Define some commonly used intertial properties  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="${-base_length/2 + 0.177} 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0.05 0"/> <!-- pitch the mesh because the casters are below the level line. TODO marqrazz fix this -->
      <geometry>
           <mesh filename="file://$(find platform_description)/urdf/meshes/c300_base_link.dae"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="${-base_length/2 + 0.077} 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

   <!-- Robot Footprint -->
  <link name="base_footprint">
  	<xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-wheel_radius}" rpy="0 0 0"/>
  </joint>

  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
      	<origin xyz="0 0 0" rpy="${pi/2 + y_reflect * pi/2} 0 0"/>
        <geometry>
           <mesh filename="file://$(find platform_description)/urdf/meshes/wheel_link.dae"/>
      </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="0 ${y_reflect*wheel_track/2} 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="1" y_reflect="1" />
  <gazebo reference="drivewhl_l_link">
    <mu1>100000.0</mu1>
    <mu2>100000.0</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <xacro:wheel prefix="drivewhl_r" x_reflect="1" y_reflect="-1" />
  <gazebo reference="drivewhl_r_link">
    <mu1>100000.0</mu1>
    <mu2>100000.0</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <link name="rr_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${(wheel_radius-(base_height/2))}"/>
  </link>

  <gazebo reference="rr_caster">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <joint name="rr_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="rr_caster"/>
    <origin xyz="${-caster_xoff} 0.193 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  ----
  <link name="lr_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${(wheel_radius-(base_height/2))}"/>
  </link>

  <gazebo reference="lr_caster">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <joint name="lr_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lr_caster"/>
    <origin xyz="${-caster_xoff} -0.193 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>platform_driver</namespace>
      </ros>

      <!-- wheels -->
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>${wheel_track}</wheel_separation>
      <wheel_diameter>${wheel_radius*2}</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>150</max_wheel_torque>
      <max_wheel_acceleration>3.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

 <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.125"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.0508" length="0.055"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.0508" length="0.055"/>
      </geometry>
    </visual>
  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0 0 0.19" rpy="0 0 0"/>
  </joint>

  <gazebo reference="lidar_link">
    <sensor name="lidar" type="ray">
      <always_on>true</always_on>
      <visualize>false</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120000</min>
          <max>3.5</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

</robot>
